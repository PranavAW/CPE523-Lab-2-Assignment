# Utilized example from Open Source Robotics Foundation, Inc.

import rclpy

from ackermann_msgs.msg import AckermannDriveStamped
from rclpy.node import Node

from std_msgs.msg import String
from std_msgs.msg import Int16
from std_msgs.msg import Int8

class talker(Node):

    def __init__(self):
        super().__init__('talker')
        self.declare_parameter('v', 10.0)
        self.declare_parameter('d', 10.0)
        self.talkgetv = self.get_parameter('v').value
        self.talkgetd = self.get_parameter('d').value
        self.talkpubv =   self.create_publisher(AckermannDriveStamped, 'speed', 10) 
        self.talkpubd =   self.create_publisher(AckermannDriveStamped, 'steering_angle', 10)
        self.msg = self.talkpubv  # prevent unused variable warning
        self.msg = self.talkpubd  # prevent unused variable warning
        
        timer_period = 0.01 #seconds
        self.create_timer(timer_period, self.talker_callback)
        self.i = 0
    #def talksub_callback(self, msg):
     #   self.get_logger().info('I heard: "%s"' % msg.data)

    def talker_callback(self):
        ack_msg = AckermannDriveStamped()
        ack_msg.drive.speed = float(self.talkgetv)
        ack_msg.drive.steering_angle = float(self.talkgetd)
        self.talkpubv.publish(ack_msg)
        self.talkpubd.publish(ack_msg)
        self.get_logger().info('Publishing: speed = "%s"' % ack_msg.drive.speed)
        self.get_logger().info('Publishing: steering_angle = "%s"' % ack_msg.drive.steering_angle)
        self.i += 1


def main(args=None):
    rclpy.init(args=args)

    talker_ = talker()

    try:
        rclpy.spin(talker_)
    except KeyboardInterrupt:
        pass
    finally:
    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
        talker_.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
